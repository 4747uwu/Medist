import mongoose from 'mongoose';

const prescriptionSchema = new mongoose.Schema({
  prescriptionId: {
    type: String,
    unique: true,
    required: false
  },
  
  // Patient reference
  patientId: {
    type: String,
    required: true,
    ref: 'Patient'
  },
  
  // NEW: Appointment reference
  appointmentId: {
    type: String,
    ref: 'Appointment'
  },
  
  // Visit reference
  visitId: {
    type: String,
    required: true,
    ref: 'Visit'
  },
  
  // Doctor reference
  doctorId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'User'
  },
  
  // Lab reference
  labId: {
    type: String,
    required: true,
    ref: 'Lab'
  },
  
  // NEW: Appointment data snapshot (for context)
  appointmentData: {
    appointmentId: String,
    scheduledDate: Date,
    scheduledTime: String,
    chiefComplaints: {
      primary: String,
      duration: String,
      severity: String
    },
    vitals: {
      weight: { value: Number, unit: String },
      temperature: { value: Number, unit: String },
      bloodPressure: { systolic: Number, diastolic: Number },
      heartRate: { value: Number, unit: String },
      oxygenSaturation: { value: Number, unit: String },
      bloodSugar: { value: Number, type: String, unit: String }
    },
    examination: {
      physicalFindings: String,
      provisionalDiagnosis: String,
      differentialDiagnosis: [String]
    }
  },
  
  // Prescribed medicines
  medicines: [{
    medicineId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Medicine',
      required: true
    },
    medicineName: String, // Denormalized for quick access
    medicineCode: String,
    dosage: String,
    frequency: String,
    duration: String,
    timing: String,
    instructions: String,
    quantity: Number,
    substitutionAllowed: {
      type: Boolean,
      default: true
    }
  }],
  
  // Prescribed tests
  tests: [{
    testId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Test',
      required: true
    },
    testName: String, // Denormalized for quick access
    testCode: String,
    urgency: {
      type: String,
      enum: ['Routine', 'Urgent', 'STAT'],
      default: 'Routine'
    },
    instructions: String,
    reportRequired: {
      type: Boolean,
      default: true
    }
  }],
  
  // Diagnosis and symptoms
  diagnosis: {
    primary: String,
    secondary: [String],
    icd10Codes: [String]
  },
  
  symptoms: [String],
  
  // Medical advice
  advice: {
    lifestyle: String,
    diet: String,
    followUp: {
      required: {
        type: Boolean,
        default: false
      },
      duration: String,
      instructions: String,
      nextAppointmentDate: Date
    }
  },
  
  // Prescription status
  status: {
    type: String,
    enum: ['Active', 'Completed', 'Cancelled', 'Expired'],
    default: 'Active'
  },
  
  // Validity
  validFrom: {
    type: Date,
    default: Date.now
  },
  
  validTill: {
    type: Date,
    default: function() {
      const date = new Date();
      date.setMonth(date.getMonth() + 1); // Valid for 1 month by default
      return date;
    }
  },
  
  // Generated by
  generatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Signature and verification
  digitalSignature: String,
  verificationCode: String
  
}, {
  timestamps: true
});

// Indexes for performance
prescriptionSchema.index({ prescriptionId: 1 });
prescriptionSchema.index({ patientId: 1 });
prescriptionSchema.index({ appointmentId: 1 }); // NEW
prescriptionSchema.index({ visitId: 1 });
prescriptionSchema.index({ doctorId: 1 });
prescriptionSchema.index({ labId: 1 });
prescriptionSchema.index({ status: 1 });
prescriptionSchema.index({ validFrom: 1, validTill: 1 });

// Compound indexes
prescriptionSchema.index({ patientId: 1, createdAt: -1 });
prescriptionSchema.index({ doctorId: 1, createdAt: -1 });
prescriptionSchema.index({ appointmentId: 1, patientId: 1 }); // NEW

// Auto-generate prescription ID
prescriptionSchema.pre('save', async function(next) {
  if (this.isNew && !this.prescriptionId) {
    const count = await this.constructor.countDocuments({
      labId: this.labId,
      createdAt: {
        $gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1),
        $lt: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 1)
      }
    });
    
    const year = new Date().getFullYear();
    const month = String(new Date().getMonth() + 1).padStart(2, '0');
    const sequence = String(count + 1).padStart(4, '0');
    
    this.prescriptionId = `RX-${this.labId}-${year}${month}-${sequence}`;
  }
  next();
});

const Prescription = mongoose.model('Prescription', prescriptionSchema);

export default Prescription;